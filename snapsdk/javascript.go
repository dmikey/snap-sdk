package main

import (
	"fmt"
	"strings"
)

type JavascriptGenerator struct{}

func (JavascriptGenerator) Name() string { return "js" }
func (j JavascriptGenerator) Generate(snap Snap) (string, error) {
	var output strings.Builder

	fmt.Fprintf(&output, "// Generated by Snap version: %s\n", snap.Snap)

	// Generate code for each object and its methods.
	for objName, obj := range snap.Objects {
		// Write the object.
		fmt.Fprintf(&output, "class %s {\n", objName)

		// Write each method.
		for name, method := range obj.Methods {
			// Create a list of parameter names.
			params := make([]string, len(method.Parameters))
			for i, param := range method.Parameters {
				params[i] = param.Name
			}

			// Write the method signature and description.
			fmt.Fprintf(&output, "\t// %s\n", method.Description)
			fmt.Fprintf(&output, "\t%s(%s) {\n", name, strings.Join(params, ", "))

			// Generate a receiver call if receiver exists
			if receiver, ok := method.Receiver["javascript"]; ok {
				fmt.Fprintf(&output, "\t\treturn this.%s(%s);\n", receiver, strings.Join(params, ", "))
			} else {
				// Generate a sample return value based on `method.ReturnType`.
				// For now, just return a placeholder object.
				fmt.Fprintf(&output, "\t\treturn %s;\n", "{}")
			}

			fmt.Fprintf(&output, "\t}\n")
		}
		fmt.Fprintf(&output, "}\n")

		// Write the module exports.
		fmt.Fprintf(&output, "module.exports.%s = %s;\n", objName, objName)
	}

	return output.String(), nil
}
